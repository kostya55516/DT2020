\import lect02 \hiding (+,*)
\open Nat \hiding (-,div) -- Здесь лежат + и *.

-- I. Задания на рекурсивные определения.

-- 1. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> a -> a -> a
   if True t _ = t
   if False _ e = e
-}

\func if {A : \Type} (b : Bool) (x y : A) : A \elim b
  | true  => x
  | false => y

-- 2. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => if x true y

-- 3. Определите возведение в степень и факториал для натуральных чисел.

\func \infixr 8 ^ (x y : Nat) : Nat \elim y
  | 0     => 1
  | suc y => x * (x ^ y)

\func fac (x : Nat) : Nat \elim x
  | 0     => 1
  | suc x => (suc x) * (fac x)

-- 4. Определите mod и gcd.

\func mod (x y : Nat) => mod' x x y
  \where
    \func mod' (s x y : Nat) : Nat \elim s
      | 0     => x
      | suc s => if (x < y) x (mod' s (x - y) y)

\func gcd (x y : Nat) : Nat => gcd' x x y
  \where
    \func gcd' (s x y : Nat) : Nat \elim s, y
      | 0, _     => 0
      | _, 0     => x
      | suc s, y => gcd' s y (x `mod` y)

-- 5. Определите (полиморфный) reverse для списков.

\func reverse {A : \Type} (xs : List A) : List A => reverse' xs xs
  \where
    \func reverse' {A : \Type} (xs res : List A) : List A \elim xs
      | nil       => res
      | cons x xs => reverse' xs (cons x res)

-- 6. Реализуйте любой (but choose wisely) алгоритм сортировки. Функцию сравнения можно принимать в качестве аргумента.

\func filter {A : \Type} (f : A -> Bool) (xs : List A) : List A \elim xs
  | nil       => nil
  | cons x xs => if (f x) (cons x (filter f xs)) (filter f xs)

\func flip {A B : \Type} (f : A -> A -> B) (x y : A) : B => f y x

\func sort {A : \Type} (xs : List A) (ord : A -> A -> Bool) : List A \elim xs
  | nil       => nil
  | cons x xs => (part (ord x) xs ord) ++ (cons x (part (flip ord x) xs ord))
    \where
      \func part {A : \Type} (f : A -> Bool) (xs : List A) (ord : A -> A -> Bool) : List A => sort (filter f xs) ord

