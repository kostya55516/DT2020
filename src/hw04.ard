\import Utils
\import lect04

-- 1. Напишите функцию lookup, которая принимает List A и натуральное число и возвращает элемент по заданому индексу.
--    В общем случае эту функцию определить невозможно, т.к. индекс может быть больше, чем число элементов в списке.
--    Поэтому эта функция должна дополнительно еще принимать доказательство того, что индекс находится в допустимых границах, в виде T (n < length xs).

\func \infix 4 < (x y : Nat) : Bool
  | 0, 0 => false
  | 0, suc y => true
  | suc x, 0 => false
  | suc x, suc y => x < y

\func lookup {A : \Type} (n : Nat) (xs : List A) {h : T(n < length xs)} : A \elim n, xs, h
  | 0, cons a _, h => a
  | suc n, cons _ xs, h => lookup n xs {h}

-- 2. Реализуйте аналоги функции replicate для vec и Vec (эта функция создает список заданной длины, состоящий из повторений данного элемента).

\func replicate_vec {A : \Type} (n : Nat) (a : A) : vec A n \elim n
  | 0 => ()
  | suc n => (a, replicate_vec n a)

\func replicateVec {A : \Type} (n : Nat) (a : A) : Vec A n \elim n
  | 0 => vnil
  | suc n => vcons a (replicateVec n a)

-- 3. Реализуйте аналоги функции map для vec и Vec.

\func map_vec {A B : \Type} {n : Nat} (f : A -> B) (xs : vec A n) : vec B n \elim n
  | 0 => ()
  | suc n => (f (xs.1), map_vec f xs.2)

\func mapVec {A B : \Type} {n : Nat} (f : A -> B) (xs : Vec A n) : Vec B n \elim n, xs
  | 0, vnil => vnil
  | suc n, vcons a xs => vcons (f a) (mapVec f xs)

-- 4. Реализуйте аналоги функции zipWith для vec и Vec.
--    Функция должна принимать вектора одинаковой длины.
\func zipWith_vec {A B C : \Type} {n : Nat} (f : A -> B -> C) (xs : vec A n) (ys : vec B n) : vec C n \elim n
  | 0 => ()
  | suc n => (f xs.1 ys.1, zipWith_vec f xs.2 ys.2)

\func zipWithVec {A B C : \Type} {n : Nat} (f : A -> B -> C) (xs : Vec A n) (ys : Vec B n) : Vec C n \elim n, xs, ys
  | 0, vnil, vnil => vnil
  | suc n, vcons x xs, vcons y ys => vcons (f x y) (zipWithVec f xs ys)

-- 5. Функции Fin n → A соответствуют спискам элементов A длины n.
--    Функция, преобразующая Vec A n в Fin n → A, была реализована на лекции.
--    Реализуйте обратную функцию.

\func coin {A : \Type} {n : Nat} (f : Fin n -> A) : Vec A n \elim n
  | 0 => vnil
  | suc n => vcons (f fzero) (coin (\lam t => f (fsuc t)))

-- 6. Определите тип матриц и ряд функций над ними.

\func Mat (A : \Type) (n m : Nat) => Vec (Vec A m) n

-- диагональная матрица с элементами e на диагонали и z на остальных позициях.

\func diag {A : \Type} (z e : A) (n : Nat) : Mat A n n => coin (\lam i => coin (\lam j => eq i j z e))
  \where
    \func eq {A : \Type} {n : Nat} (i j : Fin n) (z e : A) : A \elim n, i, j
      | suc n, fzero, fzero => e
      | suc n, fsuc i, fsuc j => eq i j z e
      | suc n, _, _ => z

-- транспонирование матриц

\func foldlVec {A B : \Type} {n : Nat} (f : B -> A -> B) (v : Vec A n) (b : B) : B \elim n, v
  | 0, vnil => b
  | suc n, vcons a v => foldlVec f v (f b a)

\func foldrVec {A B : \Type} {n : Nat} (f : A -> B -> B) (v : Vec A n) (b : B) : B \elim n, v
  | 0, vnil => b
  | suc n, vcons a v => f a (foldrVec f v b)

\func transpose {A : \Type} {n m : Nat} (M : Mat A n m) : Mat A m n \elim n, M
  | 0, vnil => replicateVec m vnil
  | suc n, vcons a v => zipWithVec (\lam x xs => vcons x xs) a (transpose v)

-- сложение матриц

\func matAdd {A : \Type} (add : A -> A -> A) (n m : Nat) (M N : Mat A n m) : Mat A n m => zipWithVec (\lam v1 v2 => zipWithVec add v1 v2) M N

-- умножение матриц

-- z ─ нейтральный элемент по сложению.
\func matMul {A : \Type} (z : A) (add mul : A -> A -> A) (n m k : Nat) (M : Mat A n m) (N : Mat A m k) : Mat A n k
  => \let N => transpose N \in coin (\lam i => coin (\lam j => foldlVec add (zipWithVec add (lect04.lookup M i) (lect04.lookup N j)) z))

-- 7. Определите тип CTree A n полных бинарных деревьев высоты ровно n, которые хранят элементы только во внутренних узлах, но не в листьях.
--    Высота листа равна 0.

\data CTree (A : \Type) (n : Nat) \elim n
  | 0 => cleaf
  | suc n => cnode A (CTree A n) (CTree A n)

-- 8. Определите тип Tree A n бинарных деревьев высоты не больше n, которые хранят элементы только во внутренних узлах, но не в листьях.
--    Высота листа равна 0.

\data Tree (A : \Type) (n : Nat) \elim n
  | suc n => node A (Tree A n) (Tree A n)
  | _ => leaf

-- определите функцию, возвращающую высоту дерева.

\func height {A : \Type} {n : Nat} (t : Tree A n) : Fin (suc n) \elim n, t
  | _, leaf => fzero
  | suc n, node a t1 t2 => fsuc (max (height t1) (height t2))
    \where
      \func max {n : Nat} (a b : Fin n) : Fin n
        | {suc n}, fzero, b => b
        | {suc n}, a, fzero => a
        | {suc n}, fsuc f1, fsuc f2 => fsuc (max f1 f2)
