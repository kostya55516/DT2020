\import Utils \hiding (<=-refl)
\import lect05 (+-comm, funExt)
\import lect06
\open Nat(+,*)

-- 1. Докажите, что vnil является нейтральным элементом для v++.

\func vnil-rightId {A : \Type} {n : Nat} (xs : Vec A n) : transport (Vec A) (+-comm 0 n) (xs v++ vnil) = xs \elim n, xs
  | 0, vnil => idp
  | suc n, vcons x xs => lem x (xs v++ vnil) (+-comm 0 n) *> pmap (vcons x) (vnil-rightId xs)
  \where
    \func lem {A : \Type} {n : Nat} (x : A) (xs : Vec A n) {y : Nat} (p : n = y)
      : transport (Vec A) (pmap suc p) (vcons x xs) = vcons x (transport (Vec A) p xs)
      \elim p
        | idp => idp

-- 2. Определите предикат принадлежности элемента списку.

\data In {A : \Type} (a : A) (xs : List A) \elim xs
  | cons x xs => {in (x = a) | inNext (In a xs)}

-- 3. Докажите эквивалентность четырех различных определений LessOrEq: lessOrEq, lessOrEq', LessOrEq и LessOrEq'.

\func zero-rightId {n : Nat} : n = 0 + n \elim n
  | 0 => idp
  | suc n => pmap suc zero-rightId

\func suc+/=0 (n x : Nat) : (suc n + x = 0) -> Empty
  | 0, 0 => suc/=0
  | suc n, 0 => suc/=0
  | n, suc m => suc/=0

\func suc+ (n k : Nat) : suc n + k = suc (n + k) \elim k
  | 0 => idp
  | suc k => pmap suc (suc+ n k)

\func natPred (n : Nat) : Nat
  | 0 => 0
  | suc n => n

\func loe1 (n m : Nat) (p : lessOrEq n m) : lessOrEq' n m
  | 0, m, p => ()
  | suc n, 0, (k, p) => suc+/=0 n k p
  | suc n, suc m, (k, p) => loe1 n m (k, pmap natPred (transport (\lam t => t = suc m) (suc+ n k) p))

\func loe2 (n m : Nat) (p : lessOrEq' n m) : LessOrEq n m
  | 0, n, p => z<=n
  | suc n, suc m, p => s<=s (loe2 n m p)

\func loe3 (n m : Nat) (p : LessOrEq n m) : LessOrEq' n m
  | 0, 0, z<=n => <=-refl idp
  | 0, suc n, z<=n => <=-step (loe3 0 n z<=n)
  | suc n, suc m, s<=s l => helper (loe3 n m l)
  \where
    \func helper {n m : Nat} (p : LessOrEq' n m) : LessOrEq' (suc n) (suc m) \elim m, p
      | m, <=-refl p => <=-refl (pmap suc p)
      | suc m, <=-step l => <=-step (helper l)

\func loe4 (n m : Nat) (p : LessOrEq' n m) : lessOrEq n m
  | 0, 0, <=-refl = => (0, idp)
  | 0, suc n, <=-refl p => absurd (suc+/=0 n 0 (sym p))
  | 0, suc n, <=-step l => (suc n, sym zero-rightId)
  | suc n, 0, <=-refl p => absurd (suc/=0 p)
  | suc n, suc m, <=-refl p => (0, p)
  | suc n, suc m, <=-step l => loeHelper (loe4 n m (predLoe l))
  \where
    \func predLoe {n m : Nat} (l : LessOrEq' (suc n) m) : LessOrEq' n m \elim n, m, l
      | 0, 0, <=-refl p => absurd (suc/=0 p)
      | suc n, 0, <=-refl p => absurd (suc/=0 p)
      | n, suc m, <=-refl p => <=-step (<=-refl (pmap natPred p))
      | n, suc m, <=-step l => <=-step (predLoe l)
    \func loeHelper {n m : Nat} (p : lessOrEq n m) : lessOrEq (suc n) (suc m) \elim p
      | (k, p) => (k, transport (\lam t => t = suc m) (sym (suc+ n k)) (pmap suc p))

-- 4. Определите рефлексивное транзитивное замыкание отношения.
--    То есть ReflTransClosure R -- это минимальное рефлексивное и транзитивное отношение, содержащее R.

\data ReflTransClosure {A : \Type} (R : A -> A -> \Type) (x y : A)
  | refl (x = y)
  | trans {z : A} (R x z) (ReflTransClosure R z y)

-- 5. Докажите, что если R уже рекфлексивно и транзитивно, то ReflTransClosure R эквивалентно R.

\func ReflTransClosure-lem {A : \Type} (R : A -> A -> \Type) (refl : \Pi (x : A) -> R x x) (trans : \Pi (x y z : A) -> R x y -> R y z -> R x z)
  : \Pi (x y : A) -> R x y <-> ReflTransClosure R x y
  => \lam x y => (\lam rxy => ReflTransClosure.trans rxy (ReflTransClosure.refl idp), \lam rtc => helper R refl trans x y rtc)
  \where
    \func helper {A : \Type} (R : A -> A -> \Type) (refl : \Pi (x : A) -> R x x) (trans : \Pi (x y z : A) -> R x y -> R y z -> R x z)
                  (x y : A) (rtc : ReflTransClosure R x y) : R x y \elim rtc
      | refl idp => refl x
      | trans {z} r rtc2 => (trans x z y) r (helper R refl trans z y rtc2)

-- 6. Определите предикат Sublist xs ys на списках, означающий "список xs является подсписком ys".

\data Sublist {A : \Type} (xs ys : List A) \with
  | nil      , ys        => emptySublist
  | cons x xs, cons y ys => matchSublist (x = y) (Sublist xs ys)
  | xs       , cons y ys => nextSublist (Sublist xs ys)


-- 7. Докажите, что Sublist (filter p xs) xs для любых p и xs.

\func filterIsSublist {A : \Type} (xs : List A) (p : A -> Bool) : Sublist (filter p xs) xs \elim xs
  | nil => emptySublist
  | cons a as => \case p a \as t \return Sublist (\case t \with { | false => filter p as | true => cons a (filter p as)  }) (cons a as) \with {
    | true => matchSublist idp (filterIsSublist as p)
    | false => nextSublist (filterIsSublist as p)
  }

-- 8. Реализуйте любой алгоритм сортировки, используя \case для паттерн матчинга на результате сравнения элементов списка.

\func sort {A : \Type} (ord : A -> A -> Bool) (xs : List A) : List A \elim xs
  | nil => nil
  | cons x xs => insertSorted ord x (sort ord xs)
  \where
    \func insertSorted {A : \Type} (ord : A -> A -> Bool) (y : A) (xs : List A) : List A \elim xs
      | nil => cons y nil
      | cons x xs => \case ord x y \with {
        | true => cons x (insertSorted ord y xs)
        | false => cons y (cons x xs)
      }

-- 9. Определите filter через if, а не через \case.
--    Докажите для этой версии filter лемму filter-lem.

\func if {A : \Type} (b : Bool) (x y : A) : A \elim b
  | true  => x
  | false => y

\func filter' {A : \Type} (p : A -> Bool) (xs : List A) : List A \elim xs
  | nil => nil
  | cons a xs => if (p a) (cons a (filter' p xs)) (filter' p xs)

\func filter-lem {A : \Type} (p : A -> Bool) (xs : List A) : length (filter' p xs) Nat.<= length xs \elim xs
  | nil => zero<=_
  | cons x xs => \case p x \as t \return length (if t (cons x (filter' p xs)) (filter' p xs)) <= suc (length xs) \with {
    | true => suc<=suc (filter-lem p xs)
    | false => <=-helper (filter-lem p xs)
  }
\where \open Nat

-- 10. Закончите определение функции \func BoolFuncLem (f : Bool -> Bool) (x : Bool) : f (f (f x)) = f x из лекции.

\func BoolFuncLem (f : Bool -> Bool) (x : Bool) : f (f (f x)) = f x =>
  \case \elim x, f true \as p, idp : f true = p, f false \as q, idp : f false = q \return f (f (f x)) = f x \with {
    | true, true, ft, _, _ => pmap (\lam x => f (f x)) ft *> pmap f ft
    | true, false, ft, true, ff => pmap (\lam x => f (f x)) ft *> pmap f ff
    | true, false, ft, false, ff => pmap (\lam x => f (f x)) ft *> pmap f ff *> lect05.trans ff (sym ft)
    | false, true, ft, true, ff => pmap (\lam x => f (f x)) ff *> pmap f ft *> lect05.trans ft (sym ff)
    | false, _, _, false, ff => pmap (\lam x => f (f x)) ff *> pmap f ff
    | false, false, ft, true, ff => pmap (\lam x => f (f x)) ff *> pmap f ft
  }

-- 11. Парадокс Рассела показывает, что не существует множества всех множеств.
-- Если такое множеств существует, то мы можем определить множество B, состоящее из множеств, не содержащих себя.
-- Тогда B принадлежит себе тогда и только тогда, когда оно себе не принадлежит.
-- Отсюда следует противоречии.
-- Теорема Кантора утверждает, что не сущесвует множества X с сюръекцией из X в множество подмножеств X.
-- Ее доказательство также конструирует утверждение, которое верно тогда и только тогда, когда оно ложно.
-- Верно, что в общем случае существование такого утверждения влечет противоречие.
-- Это легко доказать при помощи исключенного третьего, но утверждение верно и без него.
-- Докажите этот факт.
\func contrProp {A : \Type} (p : A -> Not A) (q : Not A -> A) : Empty
  => \let t : Not A => (\lam a => (p a) a) \in t (q t)

-- 12. Докажите, что предикат isEven разрешим.

\func isEven (n : Nat) => \Sigma (k : Nat) (n = 2 * k)

\func odd/=even {n m : Nat} (p : suc(2 * m) = 2 * n) : Empty \elim n, m
  | 0, m => suc/=0 p
  | suc n, 0 => suc/=0 (pmap natPred (sym p))
  | suc n, suc m => odd/=even (pmap natPred (pmap natPred p))

\func isEven-dec : DecPred isEven => isEven-decRec
  \where 
  \func isEven-decRec (n : Nat) : Decide (isEven n) => \case parity n \with {
    | even k p => yes (k, p)
    | odd k p => no (\lam nEven => odd/=even (sym (lect05.trans (sym nEven.2) p)))
  }

-- 13. Докажите, что если равенство элементов A разрешимо, то любой список элементов A либо пуст,
-- либо состоитиз повторений одного элемента, либо в A существует два различных элемента.

\func repeat {A : \Type} (n : Nat) (a : A) : List A \elim n
  | 0 => nil
  | suc n => cons a (repeat n a)

\data Result (A : \Type) (xs : List A)
  | empty (xs = nil)
  | repeated (n : Nat) (a : A) (p : xs = repeat n a)
  | A-is-not-trivial (a a' : A) (p : a = a' -> Empty)

\func lemma {A : \Type} (xs : List A) {dec : DecEq A} : Result A xs \elim xs
  | nil => empty idp
  | cons x xs => \case lemma {A} xs {dec} \with {
    | empty p => repeated 1 x (pmap (cons x) p)
    | repeated n y p => \case dec x y \with {
      | yes q => repeated (suc n) y (pmap (\lam t => cons t xs) q *> pmap (cons y) p)
      | no q => A-is-not-trivial x y q
    }
    | A-is-not-trivial x y p => A-is-not-trivial x y p
  }

-- 14. Определите view, представляющий число в виде частного и остатка от деления его на произвольное (неотрицательное) число m.
--    Реализуйте функцию деления.

\data ModView (m n : Nat)
  | quot-rem (q r : Nat) (t : r < m) (p : n = q * m + r)

\func mod-view (m n : Nat) (t : 0 < m) : ModView m n
  | suc m, 0, suc<=suc p =>  quot-rem 0 0 (suc<=suc p) (zeroMult m)
  | m, suc n, p' => \case mod-view m n p' \with {
    | quot-rem q r t p => \case natEq (suc r) m \with {
      | yes w => quot-rem (suc q) 0 p' (helper p w)
      | no w => quot-rem q (suc r) (suc< t w) (pmap suc p)
    }
  }
\where
  \func natEq (n m : Nat) : Decide (n = m)
    | 0, 0 => yes idp
    | suc n, suc m => \case natEq n m \with {
      | yes p => yes (pmap suc p)
      | no n => no (\lam p => n (pmap natPred p))
    }
    | 0, suc m => no (\lam p => suc/=0 (sym p))
    | suc n, 0 => no (\lam p => suc/=0 p)

  \func suc< {n m : Nat} (p : suc n <= m) (q : Not(suc n = m)) : suc (suc n) <= m \elim n, m, p, q
    | 0, suc m, suc<=suc t, q => suc<=suc (\case \elim m, t, q \with {
      | 0, t, q => absurd (q idp)
      | suc m, t, q => suc<=suc (zero<=_)
    })
    | suc n, suc m, suc<=suc t, q => suc<=suc (suc< t (\lam w => q (pmap suc w)))

  \func helper {n q m r : Nat} (p : n = q * m + r) (w : suc r = m) : suc n = suc q * m =>
    suc n           ==< pmap suc p >==
    q * m + (suc r) ==< pmap (q * m +) w >==
    q * m + m       ==< pmap (`+ m) (*-comm q m) >==
    m * (suc q)     ==< *-comm m (suc q) >==
    suc q * m `qed

\func zeroMult (m : Nat) : 0 = 0 * m
  | 0 => idp
  | suc n => zeroMult n

\func *-comm (n m : Nat) : n * m = m * n
  | 0, m => sym (zeroMult m)
  | n, 0 => zeroMult n
  | suc n, suc m => pmap suc (
    suc n * m + n   ==< pmap (`+ n) (*-comm (suc n) m) >==
    m * n + m + n   ==< pmap (`+ m + n) (sym (*-comm n m)) >==
    n * m + m + n   ==< sym (+-assoc (n * m) m n) >==
    n * m + (m + n) ==< pmap ((n * m) +) (+-comm m n) >==
    n * m + (n + m) ==< +-assoc (n * m) n m >==
    n * suc m + m   ==< pmap (`+ m) (*-comm n (suc m)) >==
    suc m * n + m `qed
  )

\open Nat \hiding (<=)

\func div (n m : Nat) (t : 0 < m) : Nat => \case (mod-view m n t) \with {
  | quot-rem q r t p => q
}

-- 15. Докажите, что функции FromBoolToDec и FromDecToBool взаимно обратны.

\func bdb {A : \Type} (p : A -> Bool) : FromDecToBool (FromBoolToDec p) = p => funExt (\lam a => Bool) (helper p)
  \where 
  \func helper {A : \Type} (p : A -> Bool) (a : A) : FromDecToBool (FromBoolToDec p) a = p a =>
    \case p a \as b \return (\case (\case \elim b \return Decide (T b) \with {
                                                    | true => yes ()
                                                    | false => no absurd
                                                  }) \with {| yes _ => true | no _ => false}) = b \with {
      | true => idp
      | false => idp
    }

-- Мы не можем доказать, что FromBoolToDec (FromDecToBool P) = P, но мы можем доказать более слабое утверждение: эти предикаты логически эквивалентны.
-- Для этого введем эквивалентность предикатов.

\func dbd {A : \Type} (P : \Sigma (P : A -> \Type) (DecPred P))
  : \Pi (x : A) -> (FromBoolToDec (FromDecToBool P)).1 x <-> P.1 x
  => \lam x => \case P.2 x \as b \return (\Sigma  (T (\case b \with {| yes a => true | no n => false}) -> P.1 x)
                                                  (P.1 x -> T (\case b \with {| yes a => true | no n => false}))) \with {
    | yes q => (\lam _ => q, \lam _ => ())
    | no q => (\lam t => absurd t, \lam t => q t)
  }
