\import Utils
\import lect11

-- 1. Докажите, что add x (add x s) = add x s и add x (add y s) = add y (add x s)

\func add-idemp {S : SetSpec} (x : S.A) (s : S) : add x (add x s) = add x s
  => {?}

\func add-swap {S : SetSpec} (x y : S.A) (s : S) : add x (add y s) = add y (add x s)
  => {?}

-- 2. Докажите, что множество подмножеств является инстансом SetSpec

\func subsets {A : \Set} : SetSpec {A} (A -> \Prop)
  => {?}

-- 3. Докажите, что множество подмножеств является наибольшим инстансом, то есть любой другой вкладывается в него.

\func subsets-largest (S : SetSpec) : \Sigma (f : S -> (S.A -> \Prop)) (isInj f)
  => {?}

-- 4. Определите функцию isEmpty для произвольного конечного множества и для ListSet.

\func isEmptySet {S : SetSpec} (x : S) : Bool => {?}

\func isEmptyListSet {A : \Set} (x : ListSet A) : Bool => {?}

-- 5. Определите функцию union {A : \Set} : S A -> S A -> S A для произвольного S A (удовлетворяющего SetSpec) и для ListSet.

-- 6. Определите NubListSet и инстанс FinSetSpec для него.

-- 7. Определите функцию size {A : DecSet} : S -> Nat для произвольного S A (удовлетворяющего FinSetSpec), для ListSet и для NumbListSet.

-- 8. Определите функцию remove {A : DecSet} : A -> S A -> S A для произвольного S A (удовлетворяющего SetSpec), для ListSet и для NubListSet.

-- 9. Определите функцию intersection {A : DecSet} : S A -> S A -> S A для произвольного S A (удовлетворяющего SetSpec), для ListSet и для NubListSet.

-- 10. Для произвольного A : \Set и xs : S A мы не можем определить size xs, но мы можем определить предикат size xs <= n.
--     Задайте этот предикат и докажите, что он эквивалентен обычному определению, если A -- разрешимо.

-- 11. Определите предикат isFin : \Type -> \Prop так, чтобы множество \Sigma (P : A -> \Prop) (isFin (\Sigma (a : A) (P A))) удовлетворяло FinSetSpec, определите этот инстанс.

