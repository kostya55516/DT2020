\import Prelude
\import hw06 (Sublist, emptySublist, matchSublist, nextSublist)
\import lect05 (true/=false)
\import lect08
\import Utils
\open Nat(+,*)

-- 1. Укажите явно чему равен уровень в каждом из вызовов id' ниже.
--    Напишите явно чему равны типы всех функций idTest*.

\func id' {A : \Type} (a : A) => a

\func idTest1 : \Pi (A : \Type \lp) -> A -> A => id' (\level (\suc \lp) _) (id' (\level (\suc \lp) _) id)
\func idTest2 : \Type \lp -> \Type \lp => id' (\level (\suc \lp) _)  Maybe
\func idTest3 : \Type (\suc \lp) => id' (\level (\suc (\suc \lp)) _) Functor
\func idTest4 : \Type (\suc \lp) => id' (\level (\suc (\suc \lp)) _) (Functor Maybe)
\func idTest5 (f : \Pi {A B : \Type \lp} -> (A -> B) -> Maybe A -> Maybe B) => id' (\level \lp _) (Functor Maybe f)

-- 2. Определите div через Nat-ind.

\func div (n k : Nat) (p : 0 < k) : Nat => {?}

-- 3. Докажите следующий принцип индукции для списков.

\func List-ind
  {A : \Type}
  (E : List A -> \Type)
  (r : \Pi (xs : List A) -> (\Pi (ys : List A) -> length ys < length xs -> E ys) -> E xs)
  (xs : List A) : E xs \elim xs
  | nil => r nil (\lam xs q => foo E r nil xs q)
  | cons x xs => foo E r (cons x (cons x xs)) (cons x xs) <=-refl
  \where
    \func foo
      {A : \Type}
      (E : List A -> \Type)
      (r : \Pi (xs : List A) -> (\Pi (ys : List A) -> length ys < length xs -> E ys) -> E xs)
      (xs ys : List A)
      (p : length ys < length xs): E ys \elim xs, p
      | cons x xs, Nat.suc<=suc lys<=lxs => r ys (\lam ls ls<ys => foo E r xs ls (<=-trans ls<ys lys<=lxs))

-- 4. Реализуйте функцию filter и докажите ее корректность, то есть, что выполнены следующие условия:
--    * filter p xs является подсписком xs
--    * Все элементы filter p xs удовлетворяют предикату p
--    * Любой подсписок xs с тем же свойством является подсписком filter p xs

\func filter {A : \Type} (p : A -> Bool) (xs : List A) : List A \elim xs
  | nil => nil
  | cons a xs => \case p a \with {
    | true => cons a (filter p xs)
    | false => filter p xs
  }

\func filterIsSublist {A : \Type} (xs : List A) (p : A -> Bool) : Sublist (filter p xs) xs \elim xs
  | nil => emptySublist
  | cons a as => \case p a \as t \return Sublist (\case t \with { | false => filter p as | true => cons a (filter p as)  }) (cons a as) \with {
    | true => matchSublist idp (filterIsSublist as p)
    | false => nextSublist (filterIsSublist as p)
  }

\data WithPredicate {A : \Type} (xs : List A) (p : A -> Bool) \elim xs
  | cons x xs => accept (p x = true) (WithPredicate xs p)
  | nil       => emptyList

\func filterWithPredicate {A : \Type} (xs : List A) (p : A -> Bool) : WithPredicate (filter p xs) p \elim xs
  | nil => emptyList
  | cons x xs =>  \case p x \as b, idp : p x = b \return WithPredicate (\case b \with { true => (cons x (filter p xs)) | false => (filter p xs) } ) p
     \with {
    | true, q => accept q (filterWithPredicate xs p )
    | false, _ => filterWithPredicate xs p
  }

\func withPredicateIsFilter {A : \Type} (xs : List A) (p : A -> Bool) (all : List A) (xsIsSubl : Sublist xs all)
                                      (pred : WithPredicate xs p) : Sublist xs (filter p all) \elim xs, all
  | nil, _                => emptySublist
  | cons x xs, nil        => xsIsSubl
  | cons x xs, cons a all => \case p a \as b, idp : p a = b
                             \return Sublist (cons x xs) (\case b \with { true => cons a (filter p all) | false => filter p all })
                             \with {
    | true, _ => \case xsIsSubl, pred \with {
      | matchSublist x=a s, accept px=true w => matchSublist x=a (withPredicateIsFilter xs p all s w)
      | nextSublist s, accept px=true w => nextSublist (withPredicateIsFilter (cons x xs) p all s pred)
    }
    | false, q => \case xsIsSubl, pred \with {
      | matchSublist x=a s, accept px=true w => absurd (true/=false (
        true ==< sym px=true >==
        p x ==< pmap p x=a >==
        p a ==< q >==
        false `qed
      ))
      | nextSublist s, accept px=true w => withPredicateIsFilter (cons x xs) p all s pred
    }
  }

-- 5. Бонусное задание: докажите корректность любого алгоритма сортировки, отличного от сортировки вставками.
